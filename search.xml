<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>안녕하세요. 개발자 블로그입니다.</title>
      <link href="/2019/01/19/Introduce/"/>
      <url>/2019/01/19/Introduce/</url>
      
        <content type="html"><![CDATA[<p>간단한 소개 입니다.  </p><hr><h1 id="개발-및-연구-분야"><a href="#개발-및-연구-분야" class="headerlink" title="개발 및 연구 분야"></a>개발 및 연구 분야</h1><h2 id="연구분야"><a href="#연구분야" class="headerlink" title="연구분야"></a>연구분야</h2><ul><li>DataMining (Text Minig)  </li><li>NLP &#x2F; NLU &#x2F; NLG  </li><li>NER  </li><li>Search Engine  </li><li>Chatbot  </li><li>Bigdata Analysis</li></ul><h2 id="Language"><a href="#Language" class="headerlink" title="Language"></a>Language</h2><ul><li>Python  </li><li>Scala  </li><li>Java  </li><li>Visual Basic</li></ul><h2 id="Framework"><a href="#Framework" class="headerlink" title="Framework"></a>Framework</h2><ul><li><p>Tensor Flow &#x2F; Keras  </p></li><li><p>Scikit-learn &#x2F;Pandas  </p></li><li><p>Django&#x2F;Flask  </p></li><li><p>Scrapy  </p></li><li><p>Spring Boot  </p></li><li><p>Solr&#x2F;Elastic&#x2F;Lucene  </p></li><li><p>Hadoop &#x2F; Hive &#x2F; Hbase  </p></li><li><p>Spark  </p></li><li><p>Android   </p><p>  즐겁게 토론하며 개발하기를 꿈꾸는 개발자입니다.</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>3장_주택가격</title>
      <link href="/2019/01/13/3%EC%9E%A5-%EC%A3%BC%ED%83%9D%EA%B0%80%EA%B2%A9/"/>
      <url>/2019/01/13/3%EC%9E%A5-%EC%A3%BC%ED%83%9D%EA%B0%80%EA%B2%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="주택가격-예측"><a href="#주택가격-예측" class="headerlink" title="주택가격 예측"></a>주택가격 예측</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> keras</span><br><span class="line">keras.__version__</span><br></pre></td></tr></table></figure><pre><code>Using TensorFlow backend.&#39;2.1.5&#39;</code></pre><h2 id="데이터셋-로드하기"><a href="#데이터셋-로드하기" class="headerlink" title="데이터셋 로드하기"></a>데이터셋 로드하기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras.datasets <span class="keyword">import</span> boston_housing</span><br><span class="line"></span><br><span class="line">(train_data, train_targets), (test_data, test_targets) =  boston_housing.load_data()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_data.shape</span><br></pre></td></tr></table></figure><pre><code>(404, 13)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_data.shape</span><br></pre></td></tr></table></figure><pre><code>(102, 13)</code></pre><p>404개 훈련 102개 테스트 샘플<br>핏쳐 : 13<br>핏처 종류</p><ol><li>Per capita crime rate.</li><li>Proportion of residential land zoned for lots over 25,000 square feet.</li><li>Proportion of non-retail business acres per town.</li><li>Charles River dummy variable (&#x3D; 1 if tract bounds river; 0 otherwise).</li><li>Nitric oxides concentration (parts per 10 million).</li><li>Average number of rooms per dwelling.</li><li>Proportion of owner-occupied units built prior to 1940.</li><li>Weighted distances to five Boston employment centres.</li><li>Index of accessibility to radial highways.  </li><li>Full-value property-tax rate per $10,000.  </li><li>Pupil-teacher ratio by town.  </li><li>1000 * (Bk - 0.63) ** 2 where Bk is the proportion of Black people by town.  </li><li>% lower status of the population.</li></ol><h2 id="데이터-준비하기"><a href="#데이터-준비하기" class="headerlink" title="데이터 준비하기"></a>데이터 준비하기</h2><p> 피쳐마다 스케일이 다를 경우 신경망이 학습시 문제가 됨.<br> 피쳐의 정규화가 필요하다.  </p><p> 정규화 공식:<br> Z &#x3D; X-mean &#x2F; std  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mean = train_data.mean(axis=<span class="number">0</span>)</span><br><span class="line">train_data -= mean</span><br><span class="line">std = train_data.std(axis=<span class="number">0</span>)</span><br><span class="line">train_data /= std</span><br><span class="line"></span><br><span class="line">test_data -= mean</span><br><span class="line">test_data /= std</span><br></pre></td></tr></table></figure><h2 id="모델-구성"><a href="#모델-구성" class="headerlink" title="모델 구성"></a>모델 구성</h2><p>예측이므로 마지막 네트워크는 선형으로 자유롭게 학습될 수 있도록 함.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> layers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 동일한 모델을 여러 번 생성할 것이므로 함수를 만들어 사용합니다</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_model</span>():    </span><br><span class="line">    model = models.Sequential()</span><br><span class="line">    model.add(layers.Dense(<span class="number">64</span>, activation=<span class="string">&#x27;relu&#x27;</span>,</span><br><span class="line">                           input_shape=(train_data.shape[<span class="number">1</span>],)))</span><br><span class="line">    model.add(layers.Dense(<span class="number">64</span>, activation=<span class="string">&#x27;relu&#x27;</span>))</span><br><span class="line">    model.add(layers.Dense(<span class="number">1</span>))</span><br><span class="line">    model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;rmsprop&#x27;</span>, loss=<span class="string">&#x27;mse&#x27;</span>, metrics=[<span class="string">&#x27;mae&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> model</span><br></pre></td></tr></table></figure><h2 id="K-fold-검증"><a href="#K-fold-검증" class="headerlink" title="K-fold 검증"></a>K-fold 검증</h2><p>데이터를 k개로 분할하여 k번 만큼 훈련과 검증데이터를 구성하여 평가하는 방법.<br>검증은 k개의 평균으로 평가함.  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!nvidia-smi</span><br></pre></td></tr></table></figure><pre><code>Wed Jan  2 13:59:27 2019       +-----------------------------------------------------------------------------+| NVIDIA-SMI 384.69                 Driver Version: 384.69                    ||-------------------------------+----------------------+----------------------+| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC || Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. ||===============================+======================+======================||   0  GeForce GTX 980 Ti  Off  | 00000000:01:00.0 Off |                  N/A || 20%   43C    P8    17W / 260W |   6076MiB /  6077MiB |      0%      Default |+-------------------------------+----------------------+----------------------+|   1  GeForce GTX 980 Ti  Off  | 00000000:02:00.0 Off |                  N/A || 20%   45C    P8    20W / 260W |   6058MiB /  6078MiB |      0%      Default |+-------------------------------+----------------------+----------------------+                                                                               +-----------------------------------------------------------------------------+| Processes:                                                       GPU Memory ||  GPU       PID  Type  Process name                               Usage      ||=============================================================================||    0      5484    C   ...nv/versions/3.5.3/envs/env_3.5/bin/python   231MiB ||    0     19790    C   /home/nerlab/python3-devel/bin/python3        5832MiB ||    1      5484    C   ...nv/versions/3.5.3/envs/env_3.5/bin/python   278MiB ||    1     19790    C   /home/nerlab/python3-devel/bin/python3        5767MiB |+-----------------------------------------------------------------------------+</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">k = <span class="number">4</span></span><br><span class="line">num_val_samples = <span class="built_in">len</span>(train_data) // k</span><br><span class="line">num_epochs = <span class="number">100</span></span><br><span class="line">all_scores = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Fold : &#x27;</span>, i)</span><br><span class="line">    <span class="comment"># 검증 데이터 준비: k번째 분할</span></span><br><span class="line">    val_data = train_data[i * num_val_samples: (i + <span class="number">1</span>) * num_val_samples]</span><br><span class="line">    val_targets = train_targets[i * num_val_samples: (i + <span class="number">1</span>) * num_val_samples]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 훈련 데이터 준비: 다른 분할 전체</span></span><br><span class="line">    partial_train_data = np.concatenate(</span><br><span class="line">        [train_data[:i * num_val_samples],</span><br><span class="line">         train_data[(i + <span class="number">1</span>) * num_val_samples:]],</span><br><span class="line">        axis=<span class="number">0</span>)</span><br><span class="line">    partial_train_targets = np.concatenate(</span><br><span class="line">        [train_targets[:i * num_val_samples],</span><br><span class="line">         train_targets[(i + <span class="number">1</span>) * num_val_samples:]],</span><br><span class="line">        axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 케라스 모델 구성(컴파일 포함)</span></span><br><span class="line">    model = build_model()</span><br><span class="line">    <span class="comment"># 모델 훈련(verbose=0 이므로 훈련 과정이 출력되지 않습니다)</span></span><br><span class="line">    model.fit(partial_train_data, partial_train_targets,</span><br><span class="line">              epochs=num_epochs, batch_size=<span class="number">1</span>, verbose=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 검증 세트로 모델 평가</span></span><br><span class="line">    val_mse, val_mae = model.evaluate(val_data, val_targets, verbose=<span class="number">0</span>)</span><br><span class="line">    all_scores.append(val_mae)</span><br></pre></td></tr></table></figure><pre><code>Fold :  0---------------------------------------------------------------------------InternalError                             Traceback (most recent call last)~/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tensorflow/python/client/session.py in _do_call(self, fn, *args)   1326     try:-&gt; 1327       return fn(*args)   1328     except errors.OpError as e:~/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tensorflow/python/client/session.py in _run_fn(session, feed_dict, fetch_list, target_list, options, run_metadata)   1305                                    feed_dict, fetch_list, target_list,-&gt; 1306                                    status, run_metadata)   1307 ~/.pyenv/versions/3.5.3/lib/python3.5/contextlib.py in __exit__(self, type, value, traceback)     65             try:---&gt; 66                 next(self.gen)     67             except StopIteration:~/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tensorflow/python/framework/errors_impl.py in raise_exception_on_not_ok_status()    465           compat.as_text(pywrap_tensorflow.TF_Message(status)),--&gt; 466           pywrap_tensorflow.TF_GetCode(status))    467   finally:InternalError: Blas GEMM launch failed : a.shape=(1, 13), b.shape=(13, 64), m=1, n=64, k=13     [[Node: dense_1/MatMul = MatMul[T=DT_FLOAT, transpose_a=false, transpose_b=false, _device=&quot;/job:localhost/replica:0/task:0/gpu:0&quot;](_arg_dense_1_input_0_0/_43, dense_1/kernel/read)]]During handling of the above exception, another exception occurred:InternalError                             Traceback (most recent call last)&lt;ipython-input-10-c7a92978087a&gt; in &lt;module&gt;()     25     # 모델 훈련(verbose=0 이므로 훈련 과정이 출력되지 않습니다)     26     model.fit(partial_train_data, partial_train_targets,---&gt; 27               epochs=num_epochs, batch_size=1, verbose=0)     28     # 검증 세트로 모델 평가     29     val_mse, val_mae = model.evaluate(val_data, val_targets, verbose=0)~/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/keras/models.py in fit(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, **kwargs)    961                               initial_epoch=initial_epoch,    962                               steps_per_epoch=steps_per_epoch,--&gt; 963                               validation_steps=validation_steps)    964     965     def evaluate(self, x=None, y=None,~/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/keras/engine/training.py in fit(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, **kwargs)   1703                               initial_epoch=initial_epoch,   1704                               steps_per_epoch=steps_per_epoch,-&gt; 1705                               validation_steps=validation_steps)   1706    1707     def evaluate(self, x=None, y=None,~/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/keras/engine/training.py in _fit_loop(self, f, ins, out_labels, batch_size, epochs, verbose, callbacks, val_f, val_ins, shuffle, callback_metrics, initial_epoch, steps_per_epoch, validation_steps)   1233                         ins_batch[i] = ins_batch[i].toarray()   1234 -&gt; 1235                     outs = f(ins_batch)   1236                     if not isinstance(outs, list):   1237                         outs = [outs]~/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py in __call__(self, inputs)   2476         session = get_session()   2477         updated = session.run(fetches=fetches, feed_dict=feed_dict,-&gt; 2478                               **self.session_kwargs)   2479         return updated[:len(self.outputs)]   2480 ~/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tensorflow/python/client/session.py in run(self, fetches, feed_dict, options, run_metadata)    893     try:    894       result = self._run(None, fetches, feed_dict, options_ptr,--&gt; 895                          run_metadata_ptr)    896       if run_metadata:    897         proto_data = tf_session.TF_GetBuffer(run_metadata_ptr)~/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tensorflow/python/client/session.py in _run(self, handle, fetches, feed_dict, options, run_metadata)   1122     if final_fetches or final_targets or (handle and feed_dict_tensor):   1123       results = self._do_run(handle, final_targets, final_fetches,-&gt; 1124                              feed_dict_tensor, options, run_metadata)   1125     else:   1126       results = []~/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tensorflow/python/client/session.py in _do_run(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)   1319     if handle is None:   1320       return self._do_call(_run_fn, self._session, feeds, fetches, targets,-&gt; 1321                            options, run_metadata)   1322     else:   1323       return self._do_call(_prun_fn, self._session, handle, feeds, fetches)~/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tensorflow/python/client/session.py in _do_call(self, fn, *args)   1338         except KeyError:   1339           pass-&gt; 1340       raise type(e)(node_def, op, message)   1341    1342   def _extend_graph(self):InternalError: Blas GEMM launch failed : a.shape=(1, 13), b.shape=(13, 64), m=1, n=64, k=13     [[Node: dense_1/MatMul = MatMul[T=DT_FLOAT, transpose_a=false, transpose_b=false, _device=&quot;/job:localhost/replica:0/task:0/gpu:0&quot;](_arg_dense_1_input_0_0/_43, dense_1/kernel/read)]]Caused by op &#39;dense_1/MatMul&#39;, defined at:  File &quot;/home/skc8957/.pyenv/versions/3.5.3/lib/python3.5/runpy.py&quot;, line 193, in _run_module_as_main    &quot;__main__&quot;, mod_spec)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/lib/python3.5/runpy.py&quot;, line 85, in _run_code    exec(code, run_globals)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/ipykernel_launcher.py&quot;, line 16, in &lt;module&gt;    app.launch_new_instance()  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/traitlets/config/application.py&quot;, line 658, in launch_instance    app.start()  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/ipykernel/kernelapp.py&quot;, line 497, in start    self.io_loop.start()  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tornado/platform/asyncio.py&quot;, line 132, in start    self.asyncio_loop.run_forever()  File &quot;/home/skc8957/.pyenv/versions/3.5.3/lib/python3.5/asyncio/base_events.py&quot;, line 421, in run_forever    self._run_once()  File &quot;/home/skc8957/.pyenv/versions/3.5.3/lib/python3.5/asyncio/base_events.py&quot;, line 1424, in _run_once    handle._run()  File &quot;/home/skc8957/.pyenv/versions/3.5.3/lib/python3.5/asyncio/events.py&quot;, line 126, in _run    self._callback(*self._args)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tornado/platform/asyncio.py&quot;, line 122, in _handle_events    handler_func(fileobj, events)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tornado/stack_context.py&quot;, line 300, in null_wrapper    return fn(*args, **kwargs)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/zmq/eventloop/zmqstream.py&quot;, line 450, in _handle_events    self._handle_recv()  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/zmq/eventloop/zmqstream.py&quot;, line 480, in _handle_recv    self._run_callback(callback, msg)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/zmq/eventloop/zmqstream.py&quot;, line 432, in _run_callback    callback(*args, **kwargs)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tornado/stack_context.py&quot;, line 300, in null_wrapper    return fn(*args, **kwargs)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/ipykernel/kernelbase.py&quot;, line 283, in dispatcher    return self.dispatch_shell(stream, msg)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/ipykernel/kernelbase.py&quot;, line 233, in dispatch_shell    handler(stream, idents, msg)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/ipykernel/kernelbase.py&quot;, line 399, in execute_request    user_expressions, allow_stdin)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/ipykernel/ipkernel.py&quot;, line 208, in do_execute    res = shell.run_cell(code, store_history=store_history, silent=silent)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/ipykernel/zmqshell.py&quot;, line 537, in run_cell    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/IPython/core/interactiveshell.py&quot;, line 2662, in run_cell    raw_cell, store_history, silent, shell_futures)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/IPython/core/interactiveshell.py&quot;, line 2785, in _run_cell    interactivity=interactivity, compiler=compiler, result=result)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/IPython/core/interactiveshell.py&quot;, line 2901, in run_ast_nodes    if self.run_code(code, result):  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/IPython/core/interactiveshell.py&quot;, line 2961, in run_code    exec(code_obj, self.user_global_ns, self.user_ns)  File &quot;&lt;ipython-input-10-c7a92978087a&gt;&quot;, line 24, in &lt;module&gt;    model = build_model()  File &quot;&lt;ipython-input-9-d9f7195d2712&gt;&quot;, line 8, in build_model    input_shape=(train_data.shape[1],)))  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/keras/models.py&quot;, line 467, in add    layer(x)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/keras/engine/topology.py&quot;, line 619, in __call__    output = self.call(inputs, **kwargs)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/keras/layers/core.py&quot;, line 855, in call    output = K.dot(inputs, self.kernel)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/keras/backend/tensorflow_backend.py&quot;, line 1075, in dot    out = tf.matmul(x, y)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tensorflow/python/ops/math_ops.py&quot;, line 1844, in matmul    a, b, transpose_a=transpose_a, transpose_b=transpose_b, name=name)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tensorflow/python/ops/gen_math_ops.py&quot;, line 1289, in _mat_mul    transpose_b=transpose_b, name=name)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tensorflow/python/framework/op_def_library.py&quot;, line 767, in apply_op    op_def=op_def)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tensorflow/python/framework/ops.py&quot;, line 2630, in create_op    original_op=self._default_original_op, op_def=op_def)  File &quot;/home/skc8957/.pyenv/versions/3.5.3/envs/env_3.5/lib/python3.5/site-packages/tensorflow/python/framework/ops.py&quot;, line 1204, in __init__    self._traceback = self._graph._extract_stack()  # pylint: disable=protected-accessInternalError (see above for traceback): Blas GEMM launch failed : a.shape=(1, 13), b.shape=(13, 64), m=1, n=64, k=13     [[Node: dense_1/MatMul = MatMul[T=DT_FLOAT, transpose_a=false, transpose_b=false, _device=&quot;/job:localhost/replica:0/task:0/gpu:0&quot;](_arg_dense_1_input_0_0/_43, dense_1/kernel/read)]]</code></pre><p>GPU 장비 관련 이슈가 있어 글로만 학습</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_scores</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.mean(all_scores)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> keras <span class="keyword">import</span> backend <span class="keyword">as</span> K</span><br><span class="line"></span><br><span class="line"><span class="comment"># 메모리 해제</span></span><br><span class="line">K.clear_session()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">um_epochs = <span class="number">500</span></span><br><span class="line">all_mae_histories = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;처리중인 폴드 #&#x27;</span>, i)</span><br><span class="line">    <span class="comment"># 검증 데이터 준비: k번째 분할</span></span><br><span class="line">    val_data = train_data[i * num_val_samples: (i + <span class="number">1</span>) * num_val_samples]</span><br><span class="line">    val_targets = train_targets[i * num_val_samples: (i + <span class="number">1</span>) * num_val_samples]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 훈련 데이터 준비: 다른 분할 전체</span></span><br><span class="line">    partial_train_data = np.concatenate(</span><br><span class="line">        [train_data[:i * num_val_samples],</span><br><span class="line">         train_data[(i + <span class="number">1</span>) * num_val_samples:]],</span><br><span class="line">        axis=<span class="number">0</span>)</span><br><span class="line">    partial_train_targets = np.concatenate(</span><br><span class="line">        [train_targets[:i * num_val_samples],</span><br><span class="line">         train_targets[(i + <span class="number">1</span>) * num_val_samples:]],</span><br><span class="line">        axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 케라스 모델 구성(컴파일 포함)</span></span><br><span class="line">    model = build_model()</span><br><span class="line">    <span class="comment"># 모델 훈련(verbose=0 이므로 훈련 과정이 출력되지 않습니다)</span></span><br><span class="line">    history = model.fit(partial_train_data, partial_train_targets,</span><br><span class="line">                        validation_data=(val_data, val_targets),</span><br><span class="line">                        epochs=num_epochs, batch_size=<span class="number">1</span>, verbose=<span class="number">0</span>)</span><br><span class="line">    mae_history = history.history[<span class="string">&#x27;val_mean_absolute_error&#x27;</span>]</span><br><span class="line">    all_mae_histories.append(mae_history)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">average_mae_history = [</span><br><span class="line">    np.mean([x[i] <span class="keyword">for</span> x <span class="keyword">in</span> all_mae_histories]) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_epochs)]</span><br></pre></td></tr></table></figure><h2 id="그래프-그리기"><a href="#그래프-그리기" class="headerlink" title="그래프 그리기"></a>그래프 그리기</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(average_mae_history) + <span class="number">1</span>), average_mae_history)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epochs&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Validation MAE&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 그래프가 보기힘든.. 다른걸보도록하자</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">smooth_curve</span>(<span class="params">points, factor=<span class="number">0.9</span></span>):</span><br><span class="line">  smoothed_points = []</span><br><span class="line">  <span class="keyword">for</span> point <span class="keyword">in</span> points:</span><br><span class="line">    <span class="keyword">if</span> smoothed_points:</span><br><span class="line">      previous = smoothed_points[-<span class="number">1</span>]</span><br><span class="line">      smoothed_points.append(previous * factor + point * (<span class="number">1</span> - factor))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">      smoothed_points.append(point)</span><br><span class="line">  <span class="keyword">return</span> smoothed_points</span><br><span class="line"></span><br><span class="line">smooth_mae_history = smooth_curve(average_mae_history[<span class="number">10</span>:])</span><br><span class="line"></span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(smooth_mae_history) + <span class="number">1</span>), smooth_mae_history)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;Epochs&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;Validation MAE&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>80번째 애폭 이후 줄어드는것을 멈춤.</p><p>회귀는 분류에서 사용했던 것과는 다른 손실 함수를 사용.<br>평균 제곱 오차(MSE)는 회귀에서 자주 사용되는 손실 함수.<br>비슷하게 회귀에서 사용되는 평가 지표는 분류와 다름.</p><p>당연히 정확도 개념은 회귀에 적용되지 않음.  </p><p>일반적인 회귀 지표는 평균 절대 오차(MAE)입니다.<br>입력 데이터의 특성이 서로 다른 범위를 가지면 전처리 단계에서 각 특성을 개별적으로 스케일 조정해야 합니다.<br>가용한 데이터가 적다면 K-겹 검증을 사용하는 것이 신뢰할 수 있는 모델 신뢰있게 평가 방법입니다.<br>가용한 훈련 데이터가 적다면 과대적합을 피하기 위해 은닉층의 수를 줄인 모델이 좋습니다(일반적으로 하나 또는 두 개).  </p><p>이과정을 마치며..</p><ul><li>이진 분류  </li><li>단일 레이블 다중 분류  </li><li>스칼라 회귀</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!git status</span><br></pre></td></tr></table></figure><pre><code>fatal: (현재 폴더 또는 상위 폴더가) 깃 저장소가 아닙니다: .git</code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
